//
//  MyBoxFeature.swift
//  Packy
//
//  Created Mason Kim on 2/4/24.
//

import Foundation
import ComposableArchitecture

@Reducer
struct MyBoxFeature: Reducer {

    struct State: Equatable {
        @BindingState var selectedTab: MyBoxTab = .sentBox

        var receivedBoxesData: SentReceivedGiftBoxPageData?
        var sentBoxesData: SentReceivedGiftBoxPageData?

        var receivedBoxes: [SentReceivedGiftBox] {
            receivedBoxesData?.giftBoxes.sorted(by: \.giftBoxDate) ?? []
        }
        var sentBoxes: [SentReceivedGiftBox] {
            sentBoxesData?.giftBoxes.sorted(by: \.giftBoxDate) ?? []
        }

        @BindingState var selectedBoxToDelete: SentReceivedGiftBox?

        var isFetchBoxesLoading: Bool = true
        var isShowDetailLoading: Bool = false
    }

    enum Action: BindableAction {
        // MARK: User Action
        case binding(BindingAction<State>)
        case backButtonTapped
        case tappedGiftBox(boxId: Int)
        case deleteBottomMenuConfirmButtonTapped

        // MARK: Inner Business Action
        case _onTask
        case _fetchMoreSentGiftBoxes
        case _fetchMoreReceivedGiftBoxes

        // MARK: Inner SetState Action
        case _setGiftBoxData(SentReceivedGiftBoxPageData, GiftBoxType)
        case _setFetchBoxLoading(Bool)
        case _setShowDetailLoading(Bool)

        // MARK: - Delegate Action
        enum Delegate {
            case moveToBoxDetail(ReceivedGiftBox)
        }
        case delegate(Delegate)
    }

    @Dependency(\.boxClient) var boxClient
    @Dependency(\.dismiss) var dismiss
    @Dependency(\.packyAlert) var packyAlert

    var body: some Reducer<State, Action> {
        BindingReducer()

        Reduce<State, Action> { state, action in
            switch action {
            case .binding:
                return .none

            case .backButtonTapped:
                return .run { _ in await dismiss() }

            case let .tappedGiftBox(boxId):
                state.isShowDetailLoading = true
                return .run { send in
                    do {
                        let giftBox = try await boxClient.openGiftBox(boxId)
                        await send(.delegate(.moveToBoxDetail(giftBox)))
                        await send(._setShowDetailLoading(false))
                    } catch {
                        print("üêõ \(error)")
                    }
                }

            case .deleteBottomMenuConfirmButtonTapped:
                guard let selectedBoxToDelete = state.selectedBoxToDelete else { return .none }
                return .run { send in
                    await packyAlert.show(
                        .init(
                            title: "ÏÑ†Î¨ºÎ∞ïÏä§Î•º ÏÇ≠Ï†úÌï†ÍπåÏöî?",
                            description: "ÏÑ†Î¨ºÎ∞ïÏä§Î•º ÏÇ≠Ï†úÌïòÎ©¥ Îã§Ïãú Î≥º Ïàò ÏóÜÏñ¥Ïöî\nÏÑ†Î¨ºÎ∞ïÏä§Ïóê Îã¥Í∏¥ ÏÑ†Î¨ºÎì§ÎèÑ ÏÇ¨ÎùºÏ†∏Ïöî",
                            cancel: "Ï∑®ÏÜå",
                            confirm: "ÏÇ≠Ï†ú",
                            confirmAction: {
                                // TODO: ÏÑúÎ≤Ñ Ïä§Ìéô ÎÇòÏò§Î©¥ Ïã§Ï†úÎ°ú ÏÇ≠Ï†ú Î°úÏßÅ Î∞òÏòÅ
                                do {
                                    // try await boxClient.deleteGiftBox(selectedBoxToDelete.giftBoxId)
                                    // await send(.binding(.set(\.$selectedBoxToDelete, nil)))
                                    // await send(._onTask)
                                } catch {
                                    print("üêõ \(error)")
                                }
                            }
                        )
                    )
                }

            case ._fetchMoreSentGiftBoxes:
                return fetchGiftBoxes(type: .sent, currentSize: state.sentBoxes.count)

            case ._fetchMoreReceivedGiftBoxes:
                return fetchGiftBoxes(type: .received, currentSize: state.receivedBoxes.count)

            case let ._setGiftBoxData(giftBoxData, type):
                switch type {
                case .received:
                    state.receivedBoxesData = giftBoxData
                case .sent:
                    state.sentBoxesData = giftBoxData
                default: break
                }
                return .none

            case let ._setFetchBoxLoading(isLoading):
                state.isFetchBoxesLoading = isLoading
                return .none

            case let ._setShowDetailLoading(isLoading):
                state.isShowDetailLoading = isLoading
                return .none

            case ._onTask:
                guard state.sentBoxes.isEmpty && state.receivedBoxes.isEmpty else { return .none }
                return .merge(
                    fetchGiftBoxes(type: .received, currentSize: 0),
                    fetchGiftBoxes(type: .sent, currentSize: 0)
                )

            case .delegate:
                return .none
            }
        }
    }
}

private extension MyBoxFeature {
    // TODO: ÌéòÏù¥ÏßÄÎÑ§Ïù¥ÏÖò Í¥ÄÎ†® Î°úÏßÅ ÌôïÏù∏ ÌïÑÏöî _ Î∞∞Ïó¥Î°ú Í¥ÄÎ¶¨Ìï¥ÏÑú ÎçîÌïòÎäî ÌòïÌÉúÏù∏ÏßÄ? ÏùºÎã®ÏùÄ sizeÎ•º ÎäòÎ¶¨Îäî ÌòïÌÉúÎ°ú Ï≤òÎ¶¨ÌïòÎèÑÎ°ù Ìï®
    func fetchGiftBoxes(type: GiftBoxType, currentSize: Int) -> Effect<Action> {
        .run { send in
            do {
                let giftBoxesData = try await boxClient.fetchGiftBoxes(
                    .init(
                        type: type,
                        size: currentSize + 6
                    )
                )
                await send(._setGiftBoxData(giftBoxesData, type), animation: .spring)
                await send(._setFetchBoxLoading(false), animation: .spring)
            } catch {
                print("üêõ \(error)")
            }
        }
    }
}
